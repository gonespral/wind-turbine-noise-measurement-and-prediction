import common
import numpy as np
import matplotlib.pyplot as plt
import TBL_TE_Real as TBL

visc = 1.4529 * 10**-5
Theta_e = np.pi / 2  
Phi_e = np.pi / 2   
c_0 = 340.46
rho = 1.225
c = 1

U = np.ones(10)
delta_p = np.ones(10)
delta_s = np.ones(10)


M = U / c_0
M_c = 0.8 * M                  
alpha_star = 1.516
Reynolds = rho * U * c / visc
L = 0.1
r_e = 1 
Dh = common.Dh_bar(Theta_e, Phi_e, M, M_c)      
R_deltaPstar = delta_p * U / visc


def TBL_TE(f, U, delta_s, delta_p, Reynolds, M, R_deltaPstar, Dh):
    gamma = TBL.gamma1(M)
    gamma0 = TBL.gamma01(M)
    beta = TBL.beta1(M)
    beta0 = TBL.beta01(M)
    K1 = TBL.K11(Reynolds)
    K2 = TBL.K21(alpha_star, gamma, gamma0, beta0, beta, K1)
    deltaK1 = TBL.deltaK11(alpha_star, R_deltaPstar)
    St_p = TBL.St_p1(f, delta_p, U)
    St_s = TBL.St_s1(f, delta_s, U)
    St_1 = TBL.St_11(M)
    St_2 = TBL.St_21(St_1, alpha_star)
    St_1mean = TBL.St_1mean1(St_1, St_2)
    St_peak = TBL.St_peak1(St_1, St_2, St_1mean)
    b0 = TBL.b01(Reynolds)
    b = TBL.b1(St_p, St_2)
    B_min = TBL.B_min1(b0)
    B_max = TBL.B_max1(b0)
    B_R = TBL.B_R1(B_min, B_max)
    B = TBL.B1(B_min, B_R, B_max)
    a0 = TBL.a01(Reynolds) # I started from here 
    a = TBL.a1(St_s, St_peak) 
    A_min = TBL.A_min1(a)
    A_max = TBL.A_max1(a)
    A_R = TBL.A_R1(A_min, A_max)
    A = TBL.A1(A_min, A_R, A_max) 
    SPL_alpha = TBL.SPL_alpha1(delta_s, M, L, Dh, r_e, B, St_s, St_2, K2)
    SPL_s = TBL.SPL_s1(delta_s, M, L, Dh, r_e, A, St_s, St_1, K1)
    SPL_p = TBL.SPL_p1(delta_p, M, L, Dh, r_e, A, St_p, St_1, K1, deltaK1)
    SPL_tot =  TBL.SPL_tot1(SPL_alpha, SPL_s, SPL_p)
    return SPL_s, SPL_p, SPL_alpha, SPL_tot
    #TBL.SPL_TBLTE1(SPL_s, SPL_p)

def CalculateSPL(U, delta_s, delta_p, Reynolds, M, R_deltaPstar, Dh): 
    f = np.arange(1,10000)
    SPLTBL_tot = np.zeros((10, len(f)))
    SPLTBL_alpha = np.zeros((10, len(f)))
    SPLTBL_p = np.zeros((10, len(f)))
    SPLTBL_s = np.zeros((10, len(f)))
    for k in range(10):
        for i in range(len(f)):
            SPLTBL_s[k, i] = TBL_TE(f[i], U[k], delta_s[k], delta_p[k], Reynolds[k], M[k], R_deltaPstar[k], Dh[k])[0]
            SPLTBL_p[k, i] = TBL_TE(f[i], U[k], delta_s[k], delta_p[k], Reynolds[k], M[k], R_deltaPstar[k], Dh[k])[1]
            SPLTBL_alpha[k, i] = TBL_TE(f[i], U[k], delta_s[k], delta_p[k], Reynolds[k], M[k], R_deltaPstar[k], Dh[k])[2]
            SPLTBL_tot[k, i] = TBL_TE(f[i], U[k], delta_s[k], delta_p[k], Reynolds[k], M[k], R_deltaPstar[k], Dh[k])[3]

    return SPLTBL_s, SPLTBL_p, SPLTBL_alpha, SPLTBL_tot


f = np.arange(1,10000)

SPLTBL_s, SPLTBL_p, SPLTBL_alpha, SPLTBL_tot = CalculateSPL(U, delta_s, delta_p, Reynolds, M, R_deltaPstar, Dh)

print(SPLTBL_tot.shape)    